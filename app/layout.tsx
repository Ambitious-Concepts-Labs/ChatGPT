import { getServerSession } from "next-auth";
import ClientProvider from "../components/ClientProvider";
import { SessionProvider } from "../components/SessionProvider";
import { authOptions } from "../utils/auth/authOptions";
import "../styles/globals.css";
import Head from "./head";
import { Metadata } from "next";
import AuthRouter from "./authRouter";
import { AuthContextProvider } from "./authContext";

export async function getServerSideProps(context: { req: any; query: any; }) {
  const session = await getServerSession(authOptions);
 
  if (session) {
    return {
      redirect: {
        destination: "/dashboard", // some destination '/dashboard' Ex,
        permanent: false,
      },
    };
  } else if (!session) {
    return {
      redirect: {
        destination: "/",
      },
    };
  }

  return {
    props: {
      callbackUrl: "/dashboard",
    },
  };
}

export const metadata: Metadata = {
  title: "Next.js",
  description: "Generated by Next.js",
};

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const session = await getServerSession(authOptions);
  // const { events: routerEvents } = useRouter();
  // const [pageLoading, setPageLoading] = useState<boolean>(false);

  // useEffect(() => {
  //   const startLoader = () => {
  //     setPageLoading(true);
  //   };

  //   const stopLoader = () => {
  //     setPageLoading(false);
  //   };

  //   routerEvents.on('routeChangeStart', startLoader);
  //   routerEvents.on('routeChangeComplete', stopLoader);
  //   routerEvents.on('routeChangeError', stopLoader);
  // }, [routerEvents]);

  return (
    <html lang="en">
      <Head />
      <body>
        <SessionProvider session={session}>
          <AuthContextProvider>
            <AuthRouter>
              <ClientProvider />
              {/* {pageLoading ?
                <div className=''>Loading...</div> 
                : 
                <main>{children}</main>
              } */}
              <main>{children}</main>
            </AuthRouter>
          </AuthContextProvider>
        </SessionProvider>
      </body>
    </html>
  );
}